#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int rows;
    int cols;
    int** grid;
    int high_number;
    int generations;
    int seed;
} Grid;

// Function prototypes
void allocate_grid(Grid* g);
void fillGrid(Grid* g);
void update_grid(Grid* g);
void print_grid(Grid* g);
void free_grid(Grid* g);

// Function definitions
void allocate_grid(Grid* g) {
    g->grid = (int**)malloc(g->rows * sizeof(int*));
    for (int i = 0; i < g->rows; i++) {
        g->grid[i] = (int*)malloc(g->cols * sizeof(int));
    }
}

void fillGrid(Grid* g) {
    srand(g->seed);
    for (int i = 0; i < g->rows; i++) {
        for (int j = 0; j < g->cols; j++) {
            g->grid[i][j] = rand() % g->high_number;
        }
    }
}

int sum_neighbors(Grid* g, int i, int j) {
    int sum = 0;
    for (int dx = -1; dx <= 1; dx++) {
        for (int dy = -1; dy <= 1; dy++) {
            if (i + dx >= 0 && i + dx < g->rows && j + dy >= 0 && j + dy < g->cols) {
                sum += g->grid[i + dx][j + dy];
            }
        }
    }
    return sum;
} 

int update_cell_value(int currentValue, int sum) {
    if (sum % 10 == 0) {
        return 0;
    } else if (sum < 50) {
        return currentValue + 3;
    } else if (sum > 50 && sum < 150) {
        return (currentValue - 3 >= 0) ? currentValue - 3 : 0;
    } else {
        return 1;
    }
} 

void update_grid(Grid* g) {
    int temp[g->rows][g->cols];

    for (int i = 0; i < g->rows; i++) {
        for (int j = 0; j < g->cols; j++) {
            int sum = sum_neighbors(g, i, j); //UPDATE
            temp[i][j] = update_cell_value(g->grid[i][j], sum); //UPDATE
        }
    }

    for (int i = 0; i < g->rows; i++) {
        for (int j = 0; j < g->cols; j++) {
            g->grid[i][j] = temp[i][j]; //UPDATE
        }
    }
}




void print_grid(Grid* g) {
    for (int i = 0; i < g->rows; i++) {
        for (int j = 0; j < g->cols; j++) {
            printf("%2d ", g->grid[i][j]);
        }
        printf("\n");
    }
}

void free_grid(Grid* g) {
    for (int i = 0; i < g->rows; i++) {
        free(g->grid[i]);
    }
    free(g->grid);
}

void print_parameters(const Grid* g) {
    printf("Grid parameters:\n");
    printf("Rows: %d, Cols: %d \n", g->rows, g->cols);
    printf("Seed: %d,  High: %d \n\n", g->seed, g->high_number);
}

// Main function
int main() {
    Grid g = {
            .rows = 12,
            .cols = 20,
            .grid = NULL,
            .high_number = 20,
            .generations = 10,
            .seed = 2};

    allocate_grid(&g);
    fillGrid(&g);
    print_parameters(&g);

    printf("Generation 1:\n");
    print_grid(&g);

    for (int gen = 2; gen <= g.generations; gen++) {
        printf("Generation %d:\n", gen);
        update_grid(&g);
        print_grid(&g);
        printf("\n");
    }

    free_grid(&g);
    return 0;
}
